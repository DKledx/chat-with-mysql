from dotenv import load_dotenv
from langchain_core.messages import AIMessage, HumanMessage
from langchain_community.utilities import SQLDatabase
import streamlit as st

from langchain_core.prompts import ChatPromptTemplate

from langchain_core.output_parsers import StrOutputParser
from langchain_core.runnables import RunnablePassthrough
from langchain_openai import ChatOpenAI

load_dotenv()





def init_database(user: str, password: str, host: str, port: str, database: str) -> SQLDatabase:
    db_uri = f"mysql+mysqlconnector://{user}:{password}@{host}:{port}/{database}"
    return SQLDatabase.from_uri(db_uri)


# # if get_sql_chain(db):
# #     template = 

# if "chat_history" not in st.session_state:
#     st.session_state.chat_history = [
#         AIMessage("Hello! I am a SQL assistant. Ask me anything about your Database."),
#     ]

# #Create a SQL Chain

# template = """Based on the table schema below, write a SQL query that would answer the user's question:
# {schema}

# Question: {question}
# SQL Query:"""
# prompt = ChatPromptTemplate.from_template(template)



# def get_schema(db):
#     """
#     Get the schema of the database
#     """
#     schema = db.get_table_info()
#     return schema


# # Pass the function as runnable to the SQL Chain:

# llm = ChatOpenAI()
# sql_chain = (
#     RunnablePassthrough.assign(schema=get_schema)
#     | prompt
#     | llm.bind(stop=["\nSQLResult:"])
#     | StrOutputParser()
# )

# user_question = 'how many albums are there in the database?'
# sql_chain.invoke({"question": user_question})

# # 'SELECT COUNT(*) AS TotalAlbums\nFROM Album;'

# # Create the full Chain:
# """
# Now that we have the SQL chain, we can create the full chain that will allow us to chat with the database using natural language. We will need to create a new prompt template that takes:

# the SQL query generated by the SQL chain
# the response from the database to the SQL query
# the userâ€™s input

# """
# template = """Based on the table schema below, question, sql query, and sql response, write a natural language response:
# {schema}

# Question: {question}
# SQL Query: {query}
# SQL Response: {response}"""
# prompt_response = ChatPromptTemplate.from_template(template)


# # Create a function (a tool) run the SQL query and get the reponse from the database:

# def run_query(query):
#     return db.run(query)

# # Pass the function as runnable to the SQL Chain:

# full_chain = (
#     RunnablePassthrough.assign(query=sql_chain).assign(
#         schema=get_schema,
#         response=lambda vars: run_query(vars["query"]),
#     )
#     | prompt_response
#     | model
# )

# # Now we can use the full chain to chat with the database using natural language:
# user_question = "how many albums are there in the database?"
# full_chain.invoke({"question": user_question})




#=======================================================================================================

st.set_page_config(page_title="Chat with MySQL", page_icon=":speech_balloon:")  

st.title("Chat with MySQL")

with st.sidebar:
    st.subheader("Setting")
    st.write("This is a chat application with MySQL. Coonect to the database and start chatting.")

    st.text_input("Host", value="localhost", key="host")
    st.text_input("Port", value="3306", key="port")
    st.text_input("User", value="root", key="user")
    st.text_input("Password", type="password", value="admin", key="password")
    st.text_input("Database", value="Chinook", key="database")

    if st.button("Connect"):
        with st.spinner("Connecting to the database..."):
            db = init_database(
                st.session_state["user"],
                st.session_state["password"],
                st.session_state["host"],
                st.session_state["port"],
                st.session_state["database"]
            )
            st.session_state.db = db
            st.success("Connected to the database.")


for message in st.session_state.chat_history:
    if isinstance(message, AIMessage):
      with st.chat_message("Ai"):
         st.markdown(message.content)
    elif isinstance(message, HumanMessage):
        with st.chat_message("Human"):
            st.markdown(message.content)


user_query = st.chat_input("Type your message here...")
if user_query is not None and user_query.strip() != "":
    st.session_state.chat_history.append(HumanMessage(content=user_query))


    with st.chat_message("HUman"):
        st.markdown(user_query)

    with st.chat_message("AI"):
        response = " I dont know how to respond to that"
        st.markdown(response)

    st.session_state.chat_history.append(AIMessage(content=response))




           

                  

